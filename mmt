#!/usr/bin/python
import argparse
import logging
import os
import sys

from scripts import dependency
from scripts.engine import MMTEngine, MMTServer, MMTWorker
from scripts.mt import ParallelCorpus
from scripts.mt.contextanalysis import ContextAnalyzer
from scripts.mt.lm import LanguageModel
from scripts.mt.moses import Moses
from scripts.mt.phrasetable import WordAligner, SuffixArraysPhraseTable
from scripts.mt.processing import Tokenizer, CorpusCleaner, Detokenizer

__author__ = 'Davide Caroselli'
__description = '''\
  MMT is a context-aware, incremental and general purpose Machine Translation technology.

  MMT goal is to make MT easy to adopt and scale.

  With MMT you don\'t need anymore to train multiple custom engines,
  you can push all your data to a single engine that will automatically
  and in real-time adapt to the context you provide.
  MMT aims to deliver the quality of a custom engine and the low sparsity
  of your all data combined.

  You can find more information on: http://www.modernmt.eu/
'''

_injectable_components = [Tokenizer, Detokenizer, CorpusCleaner, ContextAnalyzer, SuffixArraysPhraseTable, WordAligner,
                          LanguageModel, Moses, MMTEngine]

logging.basicConfig(
        format='%(asctime)-15s [%(levelname)s] - %(message)s',
        level=logging.DEBUG,
        stream=sys.stderr
)


def main_tune(argv):
    parser = argparse.ArgumentParser(description='Tune MMT Engine Server')
    parser.prog = 'mmt tune'
    parser.add_argument('api_port', metavar='API_PORT', help='MMT Server api port', type=int)
    parser.add_argument('corpora_path', metavar='CORPORA', help='the path to the training corpora')
    parser.add_argument('-e', '--engine', dest='engine', help='the engine name, \'default\' will be used if absent',
                        default='default')
    parser.add_argument('-d', '--debug', action='store_true', dest='debug', help='if debug is set, it enables verbose '
                                                                                 'logging and prevents temporary files '
                                                                                 'to be removed after execution')
    parser.add_argument('--skip-context-analysis', dest='context_enabled', help='if set, context analysis is skipped',
                        default=True, action='store_false')

    args = parser.parse_args(argv)

    engine = MMTEngine(name=args.engine)

    if not engine.exists():
        raise Exception('Engine "' + args.engine + '" not found')

    injector = dependency.Injector(*_injectable_components)
    injector.read_config(engine.config)
    engine = injector.inject(engine)
    server = MMTServer(engine, args.api_port)
    corpora = ParallelCorpus.list(args.corpora_path)

    server.tune(corpora, debug=args.debug, context_enabled=args.context_enabled)


def main_master(op, argv):
    parser = argparse.ArgumentParser(description='Start/Stop MMT Master server')
    parser.prog = 'mmt ' + op
    parser.add_argument('-e', '--engine', dest='engine', help='the engine name, \'default\' will be used if absent',
                        default='default')
    parser.add_argument('-p', '--api-port', dest='api_port', metavar='API_PORT',
                        help='the public available REST Api port. (default is 8080)',
                        default=8080, type=int)
    parser.add_argument('--cluster-ports', dest='cluster_ports', metavar='CLUSTER_PORTS',
                        help='two network ports used internally by the cluster to data exchange between Master Server '
                             'and Slave Workers. (default is 5000 and 5001)',
                        default=[5000, 5001], nargs=2, type=int)
    args = parser.parse_args(argv)

    engine = MMTEngine(name=args.engine)

    if not engine.exists():
        raise Exception('Engine "' + args.engine + '" not found')

    injector = dependency.Injector(*_injectable_components)
    injector.read_config(engine.config)
    engine = injector.inject(engine)

    server = MMTServer(engine, args.api_port, args.cluster_ports)

    if op == 'start':
        print 'Starting server...',
        sys.stdout.flush()

        if server.start(daemonize=True):
            print 'OK'
            print '  MMT Server running on port', args.api_port
            print
            print '  (log file:', server.log_file, ')'
        else:
            print 'FAIL'
            print '  An error occurred during server startup. Please see the log file for more details.'
            print
            print '  (log file:', server.log_file, ')'
    elif op == 'stop':
        print 'Stopping server...',
        server.stop()
        print 'OK'
    else:  # status
        print 'running' if server.is_running() else 'stopped'


def main_worker(op, argv):
    parser = argparse.ArgumentParser(description='Start/Stop MMT Slave worker')
    parser.prog = 'mmt ' + op + ' worker'
    parser.add_argument('-e', '--engine', dest='engine', help='the engine name, \'default\' will be used if absent',
                        default='default')
    parser.add_argument('-m', '--master', dest='master', help='the master remote host as user[:password]@host. Default '
                                                              'is localhost', default=None)
    parser.add_argument('--master-pem', dest='master_pem', help='the PEM file needed to connect to the '
                                                                'master remote host', default=None)
    parser.add_argument('--cluster-ports', dest='cluster_ports', metavar='CLUSTER_PORTS',
                        help='two network ports used internally by the cluster to data exchange between Master Server '
                             'and Slave Workers. (default is 5000 and 5001)',
                        default=[5000, 5001], nargs=2, type=int)
    args = parser.parse_args(argv)

    # Create engine
    engine = MMTEngine(name=args.engine)

    if not engine.exists():
        raise Exception('Engine "' + args.engine + '" not found')

    injector = dependency.Injector(*_injectable_components)
    injector.read_config(engine.config)
    engine = injector.inject(engine)

    # Parse Master parameters
    master = None

    if args.master is not None:
        if args.master.count('@') != 1:
            raise Exception('Master must be in the format "user[:password]@host"')
        credentials, host = args.master.split('@')
        user, passwd = credentials.split(':', 1) if ':' in credentials else [credentials, None]

        if args.master_pem is not None and not os.path.isfile(args.master_pem):
            raise Exception('Master PEM file "' + args.master_pem + '" not found ')

        master = {
            'host': host,
            'user': user,
            'passwd': passwd,
            'pem': args.master_pem
        }

    # Run worker
    worker = MMTWorker(engine, args.cluster_ports, master)

    if op == 'start':
        print 'Starting server...',
        sys.stdout.flush()

        if worker.start(daemonize=True):
            print 'OK'
            print '  MMT Wroker connected to', (master['host'] if master is not None else 'localhost')
            print
            print '  (log file:', worker.log_file, ')'
        else:
            print 'FAIL'
            print '  An error occurred during worker startup. Please see the log file for more details.'
            print
            print '  (log file:', worker.log_file, ')'
    elif op == 'stop':
        print 'Stopping worker...',
        worker.stop()
        print 'OK'
    else:  # status
        print 'running' if worker.is_running() else 'stopped'


def main_create(argv):
    parser = argparse.ArgumentParser(description='Train a new MMT engine from the input corpora')
    parser.prog = 'mmt create engine'
    parser.add_argument('source_lang', metavar='SOURCE_LANGUAGE', help='the source language (ISO 639-1)')
    parser.add_argument('target_lang', metavar='TARGET_LANGUAGE', help='the target language (ISO 639-1)')
    parser.add_argument('corpora_path', metavar='CORPORA', help='the path to the training corpora')
    parser.add_argument('-e', '--engine', dest='engine', help='the engine name, \'default\' will be used if absent',
                        default=None)
    parser.add_argument('-d', '--debug', action='store_true', dest='debug',
                        help='if debug is set, it enables verbose logging and prevents temporary files to be removed '
                             'after execution')
    parser.add_argument('-s', '--steps', metavar='STEPS', dest='training_steps', choices=MMTEngine.training_steps,
                        nargs='+', help='run only specified training steps {%(choices)s}')

    for component in _injectable_components:
        dependency.argparse_group(parser, component)

    if len(argv) > 0:
        args = parser.parse_args(argv)
        injector = dependency.Injector(*_injectable_components)
        injector.read_args(args)

        corpora = ParallelCorpus.list(args.corpora_path)

        engine = MMTEngine((args.source_lang, args.target_lang), args.engine)
        engine = injector.inject(engine)
        engine.build(corpora, debug=args.debug, steps=args.training_steps)
    else:
        parser.print_help()


def main():
    parser = argparse.ArgumentParser(formatter_class=argparse.RawDescriptionHelpFormatter, description=__description,
                                     usage='%(prog)s [-h] ACTION [args]', add_help=False, prog='mmt')
    parser.add_argument('action', metavar='ACTION',
                        choices=['create engine', 'start', 'stop', 'status', 'start worker', 'stop worker',
                                 'status worker', 'tune'],
                        help='{%(choices)s}', nargs='?')
    parser.add_argument('-h', '--help', dest='help', action='store_true', help='show this help message and exit')

    argv = sys.argv[1:]
    if ['create', 'engine'] == argv[:2]:
        main_create(argv[2:])
    elif ['start', 'worker'] == argv[:2] or ['stop', 'worker'] == argv[:2] or ['status', 'worker'] == argv[:2]:
        main_worker(argv[0], argv[2:])
    elif ['start'] == argv[:1] or ['stop'] == argv[:1] or ['status'] == argv[:1]:
        main_master(argv[0], argv[1:])
    elif ['tune'] == argv[:1]:
        main_tune(argv[1:])
    else:
        parser.print_help()


if __name__ == '__main__':
    main()
