#!/usr/bin/env python

import argparse
import os
import shutil
import subprocess
import time
import sys

from cassandra.cluster import Cluster

sys.path.insert(0, os.path.abspath(os.path.join(__file__, os.pardir, os.pardir, os.pardir)))

from cli.libs import daemon

__author__ = "Andrea Rossi"


# launch Cassandra (making it write in the suitable log)
# and wait until it is ready to accept CQL clients
def launch_cassandra(log_path, bin_dir, yaml_path):
    print "Launching Cassandra... "

    cassandra_log = open(log_path, 'w')
    cassandra_command = [bin_dir, '-R', '-Dcassandra.config=\"file://' + yaml_path + "\"", "-f"]
    pid = subprocess.Popen(cassandra_command,
                           stdout=cassandra_log,
                           stderr=cassandra_log,
                           shell=False).pid

    # wait until Cassandra is running
    cassandra_started = False

    try:
        for i in range(1, 100):
            if cassandra_started is True:
                break

            with open(log_path, 'r') as rlog:
                for line in rlog:
                    if 'Starting listening for CQL clients' in line:
                        cassandra_started = True
                        break
                time.sleep(1)

        if cassandra_started:
            print "done"
            print
            return pid
        else:
            print "Cassandra not answering. Shutting Cassandra down..."
            daemon.kill(pid, 5)
            print "Cassandra closed."
            raise

    except:
        print "Cassandra error. Shutting Cassandra down..."
        daemon.kill(pid, 5)
        print "Cassandra closed."
        raise


# update the cluster name via cqlsh
def update_cluster_name(new_name, host, port):
    print "updating cluster name..."
    get_cluster_name = "SELECT cluster_name FROM system.local where key='local';"
    update_cluster = "update system.local set cluster_name='" + new_name + "' where key='local';"

    try:
        cluster = Cluster(contact_points=[host], port=port)
        session = cluster.connect()
        old_name = session.execute(get_cluster_name)[0].cluster_name
        session.execute(update_cluster)
        new_name = session.execute(get_cluster_name)[0].cluster_name
        print "cluster name updated from " + old_name + " to " + new_name + "."
    except:
        raise

    print "done"
    print


# execute nodetool flush and wait until it is over
def nodetool_flush(nodetool_bin):
    print "performing nodetool flush..."
    # nodetool flush
    command = [nodetool_bin, "flush"]
    subprocess.Popen(command,
                     stdout=sys.stdout.fileno(),
                     stderr=sys.stdout.fileno(),
                     shell=False)

    # wait until nodetool is over
    time.sleep(5)
    print "done"
    print


def update_filepath(old_dir, new_dir):
    print "updating filepath..."
    # remove the new engine folder if it is already there;
    # then copy a new empty engine folder for the engine and copy the engine there
    if os.path.isdir(new_dir):
        shutil.rmtree(new_dir)
    shutil.copytree(old_dir, new_dir)

    # create a new "/models/db" folder in the new engine folder,
    # and move there the "models/cassandra" folder
    os.mkdir(os.path.join(new_dir, "models", "db"))
    shutil.move(os.path.join(new_dir, "models", "cassandra"),
                os.path.join(new_dir, "models", "db"))
    print "done"
    print


if __name__ == '__main__':
    # reopen stdout in unbuffered mode
    sys.stdout = os.fdopen(sys.stdout.fileno(), 'w', 0)

    # parser for the engine name, the 0.15.1 mmt home path, and the new mmt version home path
    parser = argparse.ArgumentParser(formatter_class=argparse.RawDescriptionHelpFormatter,
                                     description='Port a 0.15.1 engine to the current master version')
    parser.add_argument('-e', '--engine', dest='engine',
                        help='the 0.15.1 engine name, \'default\' will be used if absent',
                        default='default')
    parser.add_argument('--old-mmt-home', dest='old_mmt_home', help='the path to 0.15.1 mmt home')
    parser.add_argument('--new-mmt-home', dest='new_mmt_home', help='the path to new mmt home')

    if len(sys.argv) < 3:
        parser.print_help()
        exit(1)

    # Parse args
    args = parser.parse_args()

    # figure all the necessary paths
    old_engine_dir = os.path.join(args.old_mmt_home, "engines", args.engine)
    new_engine_dir = os.path.join(args.new_mmt_home, "engines", args.engine)
    old_engine_runtime_dir = os.path.join(args.old_mmt_home, "runtime", args.engine)
    old_yaml_path = os.path.join(old_engine_runtime_dir, "cassandra", "cassandra.yaml")
    cassandra_log_path = os.path.join(old_engine_runtime_dir, "logs", "embedded-cassandra.log")
    old_cassandra_bin = os.path.join(args.old_mmt_home, "vendor", "cassandra-3.10", "bin", "cassandra")
    old_nodetool_bin = os.path.join(args.old_mmt_home, "vendor", "cassandra-3.10", "bin", "nodetool")

    print("\n=========== PORTING ENGINE '" + args.engine + "' ===========\n")

    cassandra = launch_cassandra(cassandra_log_path, old_cassandra_bin, old_yaml_path)
    update_cluster_name('mmt-cluster', 'localhost', '9042')
    nodetool_flush(old_nodetool_bin)

    print "Stopping Cassandra..."
    daemon.kill(cassandra, 5)
    print "Done\n"

    update_filepath(old_engine_dir, new_engine_dir)

    print("=========== PORTING SUCCESS ===========\n")

    print "You can now go to " + args.new_mmt_home + \
        " and start your engine '" + args.engine + "'" + \
        " with ./mmt start -e " + args.engine
