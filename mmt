#!/usr/bin/env python
import argparse
import os
import shutil
import sys
import getpass

from cli import IllegalStateException, IllegalArgumentException
from cli.cluster import ClusterNode
from cli.engine import MMTEngine, MMTEngineBuilder
from cli.evaluation import Evaluator
from cli.libs import shell
from cli.libs.datahub import DataHub
from cli.libs.progressbar import Progressbar, UndefinedProgressbar
from cli.mt import BilingualCorpus
from cli.mt.processing import TrainingPreprocessor
from cli.translation import BatchTranslator, InteractiveTranslator, XLIFFTranslator

__author__ = 'Davide Caroselli and Andrea Rossi'
__description = '''\
  MMT is a context-aware, incremental and general purpose Machine Translation technology.

  MMT goal is to make MT easy to adopt and scale.

  With MMT you don\'t need anymore to train multiple custom engines,
  you can push all your data to a single engine that will automatically
  and in real-time adapt to the context you provide.
  MMT aims to deliver the quality of a custom engine and the low sparsity
  of your all data combined.

  You can find more information on: http://www.modernmt.eu/
'''


def __check_java():
    try:
        _, stderr = shell.execute(['java', '-version'])

        ok = False
        for line in stderr.split('\n'):
            tokens = line.split()
            if 'version' in tokens:
                if '"1.8' in tokens[tokens.index('version') + 1]:
                    ok = True
                    break
        if not ok:
            print 'ERROR: Wrong version of Java, required Java 8'
            exit(1)
    except OSError:
        print 'ERROR: Missing Java executable, please check INSTALL.md'
        exit(1)


class CLIArgsException(Exception):
    def __init__(self, parser, error):
        self.parser = parser
        self.message = error


def main_create(argv):
    parser = argparse.ArgumentParser(description='Create a new MMT engine from the input corpora')
    parser.prog = 'mmt create'
    parser.add_argument('source_lang', metavar='SOURCE_LANGUAGE', help='the source language (ISO 639-1)')
    parser.add_argument('target_lang', metavar='TARGET_LANGUAGE', help='the target language (ISO 639-1)')
    parser.add_argument('corpora_paths', metavar='CORPORA', nargs='+',
                        help='the paths to the training corpora. You can specify more than one path, '
                             'in every folder you can put mixed monolingual and bilingual corpora')
    parser.add_argument('-e', '--engine', dest='engine', help='the engine name, \'default\' will be used if absent',
                        default='default')
    parser.add_argument('-d', '--debug', action='store_true', dest='debug',
                        help='if debug is set, it enables verbose logging and prevents temporary files to be removed '
                             'after execution')
    parser.add_argument('--no-split', action='store_false', dest='split_corpora', default=True,
                        help='if no-split is set, MMT will not extract dev and test sets out of the provided '
                             'training corpora')
    parser.add_argument('-s', '--steps', metavar='STEPS', dest='training_steps',
                        choices=MMTEngineBuilder.DEFAULT_TRAINING_STEPS.keys(),
                        nargs='+', help='run only specified training steps {%(choices)s}')
    parser.add_argument('-r', '--resume', action='store_true', dest='resume', default=False,
                        help='if resume is set, it restores a previously interrupted process')

    if len(argv) > 0:
        # Parse args
        args = parser.parse_args(argv)

        # stop the node with the given engine name if it is already running
        node = ClusterNode.connect(args.engine, silent=True)
        if node is not None and node.is_running():
            node.stop()

        # initialize a builder to create and train a new engine
        builder = MMTEngineBuilder(name=args.engine,
                                   source_lang=args.source_lang,
                                   target_lang=args.target_lang,
                                   roots=args.corpora_paths,
                                   debug=args.debug,
                                   steps=args.training_steps,
                                   split_trainingset=args.split_corpora)

        # build the engine
        if args.resume:
            builder.resume()
        else:
            builder.build()
    else:
        parser.print_help()


def main_start(argv):
    parser = argparse.ArgumentParser(description='Start a MMT cluster node')
    parser.prog = 'mmt start'
    parser.add_argument('-e', '--engine', dest='engine', help='the engine name, \'default\' will be used if absent',
                        default='default')
    parser.add_argument('-v', '--verbosity', dest='verbosity', help='log verbosity (0 = only severe errors, '
                                                                    '3 = finest logging)', default=None)
    parser.add_argument('-p', '--api-port', dest='api_port', metavar='API_PORT',
                        help='the public REST Api port. (default is 8045)', default=None, type=int)
    parser.add_argument('--cluster-port', dest='cluster_port', metavar='CLUSTER_PORT',
                        help='the network port used internally by the cluster for communication between '
                             'Cluster nodes. (default is 5016)', default=None, type=int)
    parser.add_argument('--datastream-port', dest='datastream_port', metavar='DATASTREAM_PORT',
                        help='the network port used by Datastream, currently implemented with Kafka '
                             '(default is 9092', default=None, type=int)
    parser.add_argument('--db-port', dest='db_port', metavar='DB_PORT',
                        help='the network port used by the DB, currently implemented with Cassandra '
                             '(default is 9042', default=None, type=int)
    parser.add_argument('--join-leader', dest='leader', metavar='NODE_IP', default=None,
                        help='use this option to join this node to an existent cluster. '
                             'NODE is the IP of the remote host to connect to.')

    # Parse args
    args = parser.parse_args(argv)

    # create a clusterNode for that engine
    node = ClusterNode.connect(args.engine)
    ensure_not_running(node)

    success = False

    try:
        # start the ClusterNode
        print 'Starting MMT engine \'{engine}\'...'.format(engine=args.engine),
        node.start(api_port=args.api_port,
                   cluster_port=args.cluster_port,
                   datastream_port=args.datastream_port,
                   db_port=args.db_port,
                   leader=args.leader,
                   verbosity=args.verbosity)

        # wait for the node to start
        node.wait('JOINED')
        print 'OK'
        # Current version does not synchronize models
        # if args.sibling is not None:
        #     print 'Synchronizing models...',
        #     node.wait('SYNCHRONIZED')
        #     print 'OK'
        print 'Loading models...',
        node.wait('READY')
        print 'OK'

        # the node has started
        print
        print "The MMT engine '" + args.engine + "' is ready."
        print

        if node.api is not None:
            print 'You can try the API with:\n' \
                  '\tcurl "%s/translate?q=world&context=computer"' \
                  ' | python -mjson.tool\n' % node.api.base_path
        success = True

    except Exception:
        print 'FAIL'
        raise
    finally:
        if not success:
            node.stop()


def main_stop(argv):
    parser = argparse.ArgumentParser(description='Stop the local instance of MMT engine')
    parser.prog = 'mmt stop'
    parser.add_argument('-e', '--engine', dest='engine', help='the engine name, \'default\' will be used if absent',
                        default='default')

    # Parse args
    args = parser.parse_args(argv)
    # connect to the already active cluster node
    node = ClusterNode.connect(args.engine)

    print
    print 'Stopping MMT engine \'{engine}\'...'.format(engine=node.engine.name),

    if node.is_running():
        node.stop()
    print 'OK \n'


def main_tune(argv):
    parser = argparse.ArgumentParser(description='Tune MMT engine')
    parser.prog = 'mmt tune'
    parser.add_argument('--path', dest='corpora_path', metavar='CORPORA', default=None,
                        help='the path to the training corpora (default is the automatically splitted sample)')
    parser.add_argument('-e', '--engine', dest='engine', help='the engine name, \'default\' will be used if absent',
                        default='default')
    parser.add_argument('-d', '--debug', action='store_true', dest='debug', help='if debug is set, it enables verbose '
                                                                                 'logging and prevents temporary files '
                                                                                 'to be removed after execution')
    parser.add_argument('--skip-context-analysis', dest='context_enabled', help='if set, context analysis is skipped',
                        default=True, action='store_false')
    parser.add_argument('--random-seeds', dest='random_seeds', help='if set, uses random seed for tuning',
                        default=False, action='store_true')
    parser.add_argument('--max-iterations', dest='max_iterations',
                        help='set maximum iterations during tuning (default is 25)',
                        default=25, type=int)
    parser.add_argument('--accuracy', dest='accuracy', choices=['default', 'fast', 'best'], default='default',
                        help='accuracy value set the trade-off between quality and speed, possible values are: '
                             '"default" - for good trade-off between translation quality and tuning process duration, '
                             '"best" - for best translation quality and slower tuning process, '
                             '"fast" - for fastest tuning process at the expense of translation quality.')

    # Parse args
    args = parser.parse_args(argv)

    if args.accuracy == 'fast':
        args.accuracy = 10
    elif args.accuracy == 'best':
        args.accuracy = None
    else:
        args.accuracy = 1

    # connect to the already active cluster node
    node = ClusterNode.connect(args.engine)
    ensure_running(node)
    ensure_api(node)

    # perform tuning
    corpora = BilingualCorpus.list(args.corpora_path) if args.corpora_path is not None else None
    node.tune(corpora,
              debug=args.debug,
              context_enabled=args.context_enabled,
              random_seeds=args.random_seeds,
              max_iterations=args.max_iterations,
              early_stopping_value=args.accuracy)


def main_evaluate(argv):
    parser = argparse.ArgumentParser(description='Evaluate MMT engine')
    parser.prog = 'mmt evaluate'
    parser.add_argument('--path', dest='corpora_path', metavar='CORPORA', default=None,
                        help='the path to the test corpora (default is the automatically splitted sample)')
    parser.add_argument('-e', '--engine', dest='engine', help='the engine name, \'default\' will be used if absent',
                        default='default')
    parser.add_argument('--gt-key', dest='gt_key', metavar='GT_API_KEY', default=None,
                        help='A custom Google Translate API Key to use during evaluation')
    parser.add_argument('--gt-nmt', action='store_true', dest='gt_nmt', default=False,
                        help='Use Neural Google Translate API during evaluation, '
                             'you have to specify a valid key with --gt-key')
    parser.add_argument('--human-eval', dest='heval_output', metavar='OUTPUT', default=None,
                        help='the output folder for the tab-spaced files needed to setup a Human Evaluation benchmark')
    parser.add_argument('-d', '--debug', action='store_true', dest='debug', help='if debug is set, it enables verbose '
                                                                                 'logging and prevents temporary files '
                                                                                 'to be removed after execution')

    # Parse args
    args = parser.parse_args(argv)

    # connect to the already active cluster node
    node = ClusterNode.connect(args.engine)
    ensure_running(node)
    ensure_api(node)

    # perform evaluation
    evaluator = Evaluator(node, google_key=args.gt_key, google_nmt=args.gt_nmt)
    corpora = BilingualCorpus.list(args.corpora_path) if args.corpora_path is not None \
        else BilingualCorpus.list(os.path.join(node.engine.data_path, TrainingPreprocessor.TEST_FOLDER_NAME))
    evaluator.evaluate(corpora=corpora, heval_output=args.heval_output, debug=args.debug)

    if args.heval_output is not None:
        print 'Files for Human Evaluation are available here:', os.path.abspath(args.heval_output)
        print


def main_delete(argv):
    parser = argparse.ArgumentParser(description='Deletes an MMT engine')
    parser.prog = 'mmt delete'
    parser.add_argument('-e', '--engine', dest='engine', help='the engine name, \'default\' will be used if absent',
                        default='default')
    parser.add_argument('--yes', action='store_false', dest='ask_confirmation', default=True,
                        help='if "--yes" is set, this command won\'t ask for confirmation')

    # Parse args
    args = parser.parse_args(argv)

    # connect to the already active cluster node
    node = ClusterNode.connect(args.engine)

    delete = True

    if args.ask_confirmation:
        valid = {'yes': True, 'y': True, 'ye': True, 'no': False, 'n': False}

        while True:
            print 'Are you sure you want to delete engine "%s"? [y/N] ' % args.engine,
            choice = raw_input().lower()

            if choice == '':
                delete = False
                break
            elif choice in valid:
                delete = valid[choice]
                break
            else:
                print 'Please respond with "yes" or "no" (or "y" or "n").'

    if delete:
        print '\nDeleting engine "{engine}"...'.format(engine=args.engine),
        if node.is_running():
            node.stop()
        shutil.rmtree(node.engine.path, ignore_errors=True)
        print 'OK\n'
    else:
        print 'Aborted'


def main_status(argv):
    parser = argparse.ArgumentParser(description='Show the MMT engines status')
    parser.prog = 'mmt status'
    parser.add_argument('-e', '--engine', dest='engine', help='the engine name, \'default\' will be used if absent',
                        default=None)

    # Parse args
    args = parser.parse_args(argv)
    if args.engine is None:
        engines = MMTEngine.list()
    else:
        engines = [args.engine]
    if len(engines) == 0:
        print 'No engine could be found.'
        print 'You can create a new engine with the ./mmt create command.'

    # Get engine names and for each engine connect to its clusterNode and print its data
    for engine_name in engines:
        node = ClusterNode.connect(engine_name)
        node_running = node.is_running()

        print '================================================'
        print 'Engine: \'' + engine_name + '\''

        api_info = node.api
        print '   REST API:\t',
        if api_info is None and node_running:
            print 'disabled'
        elif node_running:
            print ('running - %s/translate' % api_info.base_path)
        else:
            print 'stopped'

        # cluster can not be disabled!
        print '   Cluster:\t', ('running - port %d' % node.cluster_port if node_running else 'stopped')

        datastream_info = node.datastream_info()
        print '   Datastream:\t',
        if datastream_info is None and node_running:
            print 'disabled'
        elif node_running:
            datastream_host, datastream_port = datastream_info
            print ('running - %s:%d' % (datastream_host, datastream_port))
        else:
            print 'stopped'

        database_info = node.db_info()
        print '   Database:\t',
        if database_info is None and node_running:
            print 'disabled'
        elif node_running:
            db_host, db_port = database_info
            print ('running - %s:%d' % (db_host, db_port))
        else:
            print 'stopped'


def main_translate(argv):
    parser = argparse.ArgumentParser(description='Translate text with ModernMT')

    parser.add_argument('text', metavar='TEXT', help='text to be translated (optional)', default=None, nargs='?')

    # Context arguments
    parser.add_argument('--context', metavar='CONTEXT', dest='context',
                        help='A string to be used as translation context')
    parser.add_argument('--context-file', metavar='CONTEXT_FILE', dest='context_file',
                        help='A local file to be used as translation context')
    parser.add_argument('--context-vector', metavar='CONTEXT_VECTOR', dest='context_vector',
                        help='The context vector with format: <document 1>:<score 1>[,<document N>:<score N>]')

    # NBest list arguments
    parser.add_argument('--nbest', metavar='NBEST', dest='nbest', default=None, type=int,
                        help='The number of nbest to print')
    parser.add_argument('--nbest-file', metavar='NBEST_FILE', dest='nbest_file', default=None,
                        help='The destination file for the NBest, default is stdout')

    # Mixed arguments
    parser.add_argument('-e', '--engine', dest='engine', help='the engine name, \'default\' will be used if absent',
                        default='default')
    parser.add_argument('--batch', action='store_true', dest='batch', default=False,
                        help='if set, the script will read the whole stdin before send translations to MMT.'
                             'This can be used to execute translation in parallel for a faster translation. ')
    parser.add_argument('--xliff', dest='is_xliff', action='store_true', default=False,
                        help='if set, the input is a XLIFF file.')

    # Parse args
    args = parser.parse_args(argv)

    # connect to the already active cluster node
    node = ClusterNode.connect(args.engine)
    ensure_running(node)
    ensure_api(node)

    # choose the which translator to use, depending on the input format
    if args.is_xliff:
        translator = XLIFFTranslator(node, context_string=args.context, context_file=args.context_file,
                                     context_vector=args.context_vector)
    elif args.batch:
        translator = BatchTranslator(node, context_string=args.context, context_file=args.context_file,
                                     context_vector=args.context_vector, print_nbest=args.nbest,
                                     nbest_file=args.nbest_file)
    else:
        translator = InteractiveTranslator(node, context_string=args.context, context_file=args.context_file,
                                           context_vector=args.context_vector, print_nbest=args.nbest,
                                           nbest_file=args.nbest_file)

    # translate
    try:
        if args.text is not None:
            translator.execute(args.text.strip())
        else:
            while 1:
                line = sys.stdin.readline()
                if not line:
                    break
                translator.execute(line.strip())

        translator.flush()
    except KeyboardInterrupt:
        # exit
        pass
    finally:
        translator.close()


def main_add(argv):
    parser = argparse.ArgumentParser(description='Add contribution to an existent domain')

    parser.add_argument('domain', help='The id or name of the domain you want to add the contribution to')
    parser.add_argument('source', metavar='SOURCE_SENTENCE', help='The source sentence of the contribution')
    parser.add_argument('target', metavar='TARGET_SENTENCE', help='The target sentence of the contribution')

    # Mixed arguments
    parser.add_argument('-e', '--engine', dest='engine', help='the engine name, \'default\' will be used if absent',
                        default='default')

    args = parser.parse_args(argv)

    node = ClusterNode.connect(args.engine)
    ensure_running(node)
    ensure_api(node)

    node.append_to_domain(args.domain, args.source, args.target)

    print 'SUCCESS - contribution added to domain "' + args.domain + '"'


def main_import(argv):
    parser = argparse.ArgumentParser(description='Import a new domain given TMX')

    parser.add_argument('-d', '--domain', help='The name of the new domain (default is the filename', default=None)
    parser.add_argument('-x', '--tmx-file', dest='tmx', metavar='TMX_FILE', help='TMX file to import')

    # Mixed arguments
    parser.add_argument('-e', '--engine', dest='engine', help='the engine name, \'default\' will be used if absent',
                        default='default')

    args = parser.parse_args(argv)

    if args.tmx is None:
        raise CLIArgsException(parser, 'missing option "-x"')

    if args.domain is None:
        args.domain = os.path.basename(os.path.splitext(args.tmx)[0])

    node = ClusterNode.connect(args.engine)
    ensure_running(node)
    ensure_api(node)

    progressbar = Progressbar(label='Importing TMX')

    def _import_callback(job):
        progressbar.set_progress(job['progress'])

    domain = node.new_domain(args.domain)

    progressbar.start()
    node.import_tmx(domain['id'], args.tmx, _import_callback)
    progressbar.complete()

    print 'SUCCESS - imported domain "' + domain['name'] + '" with id ' + str(domain['id'])


def main_download(argv):
    current_folder = os.path.abspath(os.path.join(__file__, os.path.pardir))

    parser = argparse.ArgumentParser(description='Generate and download a new collection of resources from DataHub')

    parser.add_argument('source', help='The source language of the resources to download')
    parser.add_argument('target', help='The target language of the resources to download')
    parser.add_argument('srcWords', help='The amount of words in source language to download '
                                            '(source words from bilingual resources)')
    parser.add_argument('trgWords', nargs='?',
                        help='The amount of words in target language to download '
                             '(both target words from bilingual resources and words from monolingual resources)',
                        default=None)

    parser.add_argument('-O', '--destination', dest='destination',
                        help='the destination for the downloaded file', default=current_folder)

    parser.add_argument('-u', '--username', dest='username', help='your DataHub username')
    parser.add_argument('-p', action='store_true')

    parser.add_argument('-A', '--authentication', dest='access_token', help='your access token')
    parser.add_argument('-H', '--host', dest='host', help='the DataHub server host')
    parser.add_argument('-P', '--port', dest='port', help='the DataHub server port')
    parser.add_argument('-y', action='store_true')

    args = parser.parse_args(argv)

    def __parse_number(num_string):
        magnitude = {'k': 1000, 'm': 1000000, 'b': 1000000000}
        last_char = num_string[-1].lower()
        try:
            return long(num_string[:-1]) * magnitude[last_char] if last_char in magnitude.keys() else long(num_string)
        except Exception:
            raise Exception("Could not interpretate number " + num_string + ". "
                            "Allowed numbers examples: 100000, 25k, 104m, 1b.\n ")

    src_words = __parse_number(args.srcWords)
    trg_words = None if args.trgWords is None else __parse_number(args.trgWords)

    password = None
    if args.access_token is None and args.username is not None and args.p is True:
        print "Write password for user " + args.username + ":"
        password = getpass.getpass()
    elif args.access_token is None and (args.username is None or args.p is False):
        raise CLIArgsException(parser, "Invalid credentials: username and password, or access token, are mandatory \n")

    datahub = DataHub(args.host, args.port)

    if args.access_token is not None:
        datahub.validate_auth(args.access_token)
    else:
        datahub.authenticate(args.username, password)

    collection = datahub.generate_collection(args.source, args.target, src_words, trg_words)
    print "Obtained collection: " + collection["name"]
    print "Id: " + str(collection["id"])
    print "Source Language: " + collection["source"]
    print "Target Language: " + collection["target"]
    print "Approximate source words: " + str(collection["approxSourceWords"])
    print "Approximate target words: " + str(collection["approxTargetWords"])

    if not args.y:
        var = raw_input("Do you want to download it? [y/n] ")
        if var != 'y' and var != 'yes':
            print("Bye.\n")
            exit()

    print "File datahub_collection_" + collection["name"] + ".zip will be saved in folder " + args.destination
    progressbar = UndefinedProgressbar(label='Downloading Collection')
    statuscode = 0
    try:
        progressbar.start()
        statuscode = datahub.download_collection(collection, args.destination)
        progressbar.complete()
        print "Request completed with code " + str(statuscode) + " "
    except Exception:
        progressbar.cancel()
        print "Request could not be completed. "

    print "Success.\n" if statuscode == 200 else "Request was not successful.\n"


def main():
    actions = {
        'create': main_create,
        'start': main_start,
        'stop': main_stop,
        'status': main_status,
        'delete': main_delete,
        'evaluate': main_evaluate,
        'tune': main_tune,
        'translate': main_translate,
        'add': main_add,
        'import': main_import,
        'download': main_download,
    }

    # Set unbuffered stdout
    unbuffered = os.fdopen(sys.stdout.fileno(), 'w', 0)
    sys.stdout = unbuffered

    parser = argparse.ArgumentParser(formatter_class=argparse.RawDescriptionHelpFormatter, description=__description,
                                     usage='%(prog)s [-h] ACTION [args]', add_help=False, prog='mmt')
    parser.add_argument('action', metavar='ACTION', choices=actions.keys(), help='{%(choices)s}', nargs='?')
    parser.add_argument('-h', '--help', dest='help', action='store_true', help='show this help message and exit')

    argv = sys.argv[1:]

    if len(argv) == 0:
        parser.print_help()
        exit(1)

    command = argv[0]
    args = argv[1:]

    try:
        if command in actions:
            actions[command](args)
        else:
            parser.print_help()
            exit(1)
    except CLIArgsException as e:
        message = '{prog}: error: {message}\n'.format(prog=e.parser.prog, message=e.message)
        e.parser.print_usage(file=sys.stderr)
        sys.stderr.write(message)
        exit(1)
    except IllegalArgumentException as e:
        sys.stderr.write('ERROR Illegal Argument: {message}\n'.format(message=e.message))
        exit(1)
    except IllegalStateException as e:
        sys.stderr.write('ERROR Illegal State: {message}\n'.format(message=e.message))
        exit(1)
    except Exception as e:
        sys.stderr.write('ERROR Unexpected exception:\n\t{message}\n'.format(message=repr(e)))
        exit(1)


# Check that the node is running
# and throw an IllegalStateException if it is not
def ensure_running(node):
    if not node.is_running():
        raise IllegalStateException('MMT engine \'%s\' is not running.\n'
                                    'Start it with "./mmt start"\n'
                                    'You can check the status of your engines with "./mmt status"'
                                    % node.engine.name)


# Check that the node is not running
# and throw an IllegalStateException if it is
def ensure_not_running(node):
    if node.is_running():
        raise IllegalStateException('MMT engine \'%s\' is already running.\n'
                                    'You can check the status of your engines with "./mmt status"'
                                    % node.engine.name)


# Check that the REST Server of the engine is running
# and throw an IllegalStateException if it is not
def ensure_api(node):
    if node.api is None:
        raise IllegalStateException('No MMT REST Server running. Enable it and restart the engine to perform tuning')


if __name__ == '__main__':
    __check_java()
    main()
