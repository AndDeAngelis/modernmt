#!/usr/bin/python
import argparse
import logging
import os
import socket
import sys

from scripts import dependency
from scripts.engine import DEFAULT_MMT_API_PORT, DEFAULT_MMT_CLUSTER_PORTS
from scripts.engine import MMTEngine, MMTServer, MMTWorker
from scripts.libs import shell, ssh
from scripts.libs.ssh import SSHException
from scripts.mt import ParallelCorpus
from scripts.mt.contextanalysis import ContextAnalyzer
from scripts.mt.lm import LanguageModel
from scripts.mt.moses import Moses
from scripts.mt.phrasetable import WordAligner, SuffixArraysPhraseTable
from scripts.mt.processing import Tokenizer, CorpusCleaner, Detokenizer

__author__ = 'Davide Caroselli'
__description = '''\
  MMT is a context-aware, incremental and general purpose Machine Translation technology.

  MMT goal is to make MT easy to adopt and scale.

  With MMT you don\'t need anymore to train multiple custom engines,
  you can push all your data to a single engine that will automatically
  and in real-time adapt to the context you provide.
  MMT aims to deliver the quality of a custom engine and the low sparsity
  of your all data combined.

  You can find more information on: http://www.modernmt.eu/
'''

_injectable_components = [Tokenizer, Detokenizer, CorpusCleaner, ContextAnalyzer, SuffixArraysPhraseTable, WordAligner,
                          LanguageModel, Moses, MMTEngine]


def __check_java():
    try:
        _, stderr = shell.execute(['java', '-version'])

        ok = False
        for token in stderr.split('\n')[0].split():
            if '"1.8' in token:
                ok = True
                break

        if not ok:
            print 'ERROR: Wrong version of Java, required Java 8'
            exit(1)
    except OSError:
        print 'ERROR: Missing Java executable, please check INSTALL.md'
        exit(1)


def __is_freeport(port):
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    result = s.connect_ex(('127.0.0.1', port))

    if result == 0:
        return False
    else:
        s.close()
        return True


class CLIArgsException(Exception):
    def __init__(self, parser, error):
        self.parser = parser
        self.message = error


class IllegalStateException(Exception):
    def __init__(self, error):
        self.message = error


def _logconfig(debug=True):
    level = logging.DEBUG if debug else logging.INFO
    _format = '%(asctime)-15s [%(levelname)s] - %(message)s'
    logging.basicConfig(format=_format, level=level, stream=sys.stderr)


def main_tune(argv):
    parser = argparse.ArgumentParser(description='Tune MMT engine')
    parser.prog = 'mmt tune'
    parser.add_argument('corpora_path', metavar='CORPORA', help='the path to the training corpora')
    parser.add_argument('-e', '--engine', dest='engine', help='the engine name, \'default\' will be used if absent',
                        default='default')
    parser.add_argument('-p', '--api-port', dest='api_port', metavar='API_PORT',
                        help='the MMT API port. (default is {port})'.format(port=DEFAULT_MMT_API_PORT),
                        default=None, type=int)
    parser.add_argument('-d', '--debug', action='store_true', dest='debug', help='if debug is set, it enables verbose '
                                                                                 'logging and prevents temporary files '
                                                                                 'to be removed after execution')
    parser.add_argument('--skip-context-analysis', dest='context_enabled', help='if set, context analysis is skipped',
                        default=True, action='store_false')

    args = parser.parse_args(argv)
    args.api_port = args.api_port if args.api_port is not None else DEFAULT_MMT_API_PORT

    _logconfig(args.debug)

    engine = MMTEngine(name=args.engine)
    if not engine.exists():
        raise IllegalStateException('engine not found: ' + args.engine)

    injector = dependency.Injector(*_injectable_components)
    injector.read_config(engine.config)
    engine = injector.inject(engine)
    server = MMTServer(engine, args.api_port)
    corpora = ParallelCorpus.list(args.corpora_path)

    server.tune(corpora, debug=args.debug, context_enabled=args.context_enabled)


def main_start(argv):
    _logconfig()

    parser = argparse.ArgumentParser(description='Start MMT server')
    parser.prog = 'mmt start'
    parser.add_argument('-e', '--engine', dest='engine', help='the engine name, \'default\' will be used if absent',
                        default='default')
    parser.add_argument('-p', '--api-port', dest='api_port', metavar='API_PORT',
                        help='the public available REST Api port. (default is {port})'
                        .format(port=DEFAULT_MMT_API_PORT), default=None, type=int)
    parser.add_argument('--cluster-ports', dest='cluster_ports', metavar='CLUSTER_PORTS',
                        help='two network ports used internally by the cluster to data exchange between '
                             'Master instance and Slave instances. (default is {port0} and {port1})'
                        .format(port0=DEFAULT_MMT_CLUSTER_PORTS[0], port1=DEFAULT_MMT_CLUSTER_PORTS[1]),
                        default=None, nargs=2, type=int)
    parser.add_argument('--master', dest='master', help='the master remote host as user[:password]@host. Default '
                                                        'is localhost', default=None)
    parser.add_argument('--master-pem', dest='master_pem', help='the PEM file needed to connect to the '
                                                                'master remote host', default=None)
    parser.add_argument('--no-slave', action='store_false', dest='slave', help='if no-slave is set, this command '
                                                                               'will start only the master instance. '
                                                                               'This is useful only in a non-trivial '
                                                                               'distributed infrastructure')
    # Parse args
    args = parser.parse_args(argv)
    if args.master is not None and args.api_port is not None:
        raise CLIArgsException(parser, 'cannot specify api-port while starting slave instance, please remove option '
                                       '"-p/--api-port" or "-m/--master"')
    if args.master is None and args.master_pem is not None:
        raise CLIArgsException(parser, 'cannot specify master-pem without master, please add option "-m/--master"')

    if not args.slave and args.master is not None:
        raise CLIArgsException(parser, 'cannot specify master with no-slave flag activated, please remove option '
                                       '"--no-slave" or "-m/--master"')

    if args.master is not None:
        if args.master.count('@') != 1:
            raise CLIArgsException(parser, 'master value must have the format "user[:password]@host"')
        credentials, host = args.master.split('@')
        user, passwd = credentials.split(':', 1) if ':' in credentials else [credentials, None]

        pemfile = None

        if args.master_pem is not None:
            pemfile = args.master_pem

            if not os.path.isfile(pemfile):
                raise CLIArgsException(parser, 'pem file not found: ' + pemfile)

            pemfile = os.path.abspath(args.master_pem)
            ssh.verify(host, pemfile)

        args.master_info = {
            'host': host,
            'user': user,
            'passwd': passwd,
            'pem': pemfile
        }
    else:
        args.master_info = None

    args.has_master = True if args.master is None else False
    args.has_slave = args.slave
    args.api_port = args.api_port if args.api_port is not None else DEFAULT_MMT_API_PORT
    args.cluster_ports = args.cluster_ports if args.cluster_ports is not None else DEFAULT_MMT_CLUSTER_PORTS

    # Check ports
    if args.has_master and not __is_freeport(args.api_port):
        raise IllegalStateException(
                'port %d is already in use, please specify another port with option -p/--api-port' % args.api_port)
    if args.has_slave and not __is_freeport(args.cluster_ports[0]):
        raise IllegalStateException(
                'port %d is already in use, please specify another port pair with option --cluster-ports' %
                args.cluster_ports[0])
    if args.has_slave and not __is_freeport(args.cluster_ports[1]):
        raise IllegalStateException(
                'port %d is already in use, please specify another port pair with option --cluster-ports' %
                args.cluster_ports[1])

    # Exec command
    engine = MMTEngine(name=args.engine)
    if not engine.exists() and args.has_master:
        raise IllegalStateException('engine not found: ' + args.engine)

    if engine.exists():
        injector = dependency.Injector(*_injectable_components)
        injector.read_config(engine.config)
        engine = injector.inject(engine)

    master = MMTServer(engine, args.api_port, args.cluster_ports) if args.has_master else None
    slave = MMTWorker(engine, args.cluster_ports, args.master_info) if args.has_slave else None

    master_started = False
    slave_started = False
    success = False

    try:
        print '\nStarting MMT engine \'{engine}\'...'.format(engine=engine.name),
        sys.stdout.flush()

        if master is not None:
            if not master.start(daemonize=True):
                raise Exception('failed to start master instance, check log file for more details: ' + master.log_file)
            master_started = True

        if slave is not None:
            if not slave.start(daemonize=True):
                raise Exception('failed to start slave instance, check log file for more details: ' + slave.log_file)
            slave_started = True

        print 'OK'
        if master is not None:
            print 'You can try the API with:'
            print '\tcurl "http://localhost:{port}/translate?q=world&context=computer"' \
                  ' | python -mjson.tool\n'.format(port=args.api_port)
        sys.stdout.flush()

        success = True
    except Exception as e:
        print 'FAIL'
        print 'ERROR: {message}\n'.format(message=e.message)
        sys.stdout.flush()
    finally:
        if not success:
            if master_started and master.is_running():
                master.stop()
            if slave_started and slave.is_running():
                slave.stop()


def main_stop(argv):
    _logconfig()

    parser = argparse.ArgumentParser(description='Stop MMT server')
    parser.prog = 'mmt stop'
    parser.add_argument('-e', '--engine', dest='engine', help='the engine name, \'default\' will be used if absent',
                        default='default')
    args = parser.parse_args(argv)

    # Exec command
    engine = MMTEngine(name=args.engine)
    master = MMTServer(engine)
    slave = MMTWorker(engine, None)

    stop_error = None

    print '\nStopping MMT engine \'{engine}\'...'.format(engine=engine.name),
    sys.stdout.flush()

    try:
        if master.is_running():
            master.stop()
    except Exception as e:
        stop_error = e

    try:
        if slave.is_running():
            slave.stop()
    except Exception as e:
        stop_error = e

    if stop_error is None:
        print 'OK\n'
    else:
        print 'FAIL'
        print 'ERROR: {message}\n'.format(message=stop_error.message)
    sys.stdout.flush()


def main_status(argv):
    _logconfig()

    parser = argparse.ArgumentParser(description='Print MMT server status')
    parser.prog = 'mmt status'
    parser.add_argument('-e', '--engine', dest='engine', help='the engine name, \'default\' will be used if absent',
                        default='default')
    args = parser.parse_args(argv)

    # Exec command
    engine = MMTEngine(name=args.engine)
    if not engine.exists():
        raise IllegalStateException('engine not found: ' + args.engine)

    injector = dependency.Injector(*_injectable_components)
    injector.read_config(engine.config)
    engine = injector.inject(engine)

    master = MMTServer(engine)
    slave = MMTWorker(engine, None)

    sys.stderr.write('Master instance: {status}\n'.format(
            status=('running' if master.is_running() else 'stopped')
    ))
    sys.stderr.write('Slave instance: {status}\n'.format(
            status=('running' if slave.is_running() else 'stopped')
    ))

    print ('running' if master.is_running() or slave.is_running() else 'stopped')


def main_create(argv):
    parser = argparse.ArgumentParser(description='Create a new MMT engine from the input corpora')
    parser.prog = 'mmt create'
    parser.add_argument('source_lang', metavar='SOURCE_LANGUAGE', help='the source language (ISO 639-1)')
    parser.add_argument('target_lang', metavar='TARGET_LANGUAGE', help='the target language (ISO 639-1)')
    parser.add_argument('corpora_path', metavar='CORPORA', help='the path to the training corpora')
    parser.add_argument('-e', '--engine', dest='engine', help='the engine name, \'default\' will be used if absent',
                        default=None)
    parser.add_argument('-d', '--debug', action='store_true', dest='debug',
                        help='if debug is set, it enables verbose logging and prevents temporary files to be removed '
                             'after execution')
    parser.add_argument('-s', '--steps', metavar='STEPS', dest='training_steps', choices=MMTEngine.training_steps,
                        nargs='+', help='run only specified training steps {%(choices)s}')

    for component in _injectable_components:
        dependency.argparse_group(parser, component)

    if len(argv) > 0:
        args = parser.parse_args(argv)
        _logconfig(args.debug)

        injector = dependency.Injector(*_injectable_components)
        injector.read_args(args)

        corpora = ParallelCorpus.list(args.corpora_path)

        engine = MMTEngine((args.source_lang, args.target_lang), args.engine)
        engine = injector.inject(engine)

        master = MMTServer(engine)
        slave = MMTWorker(engine, None)

        if master.is_running():
            master.stop()
        if slave.is_running():
            slave.stop()

        engine.builder.build(corpora, debug=args.debug, steps=args.training_steps)
    else:
        parser.print_help()


def main():
    parser = argparse.ArgumentParser(formatter_class=argparse.RawDescriptionHelpFormatter, description=__description,
                                     usage='%(prog)s [-h] ACTION [args]', add_help=False, prog='mmt')
    parser.add_argument('action', metavar='ACTION',
                        choices=['create', 'start', 'stop', 'status', 'tune'],
                        help='{%(choices)s}', nargs='?')
    parser.add_argument('-h', '--help', dest='help', action='store_true', help='show this help message and exit')

    argv = sys.argv[1:]

    try:
        if ['create'] == argv[:1]:
            main_create(argv[1:])
        elif ['start'] == argv[:1]:
            main_start(argv[1:])
        elif ['stop'] == argv[:1]:
            main_stop(argv[1:])
        elif ['status'] == argv[:1]:
            main_status(argv[1:])
        elif ['tune'] == argv[:1]:
            main_tune(argv[1:])
        else:
            parser.print_help()
            exit(1)
    except CLIArgsException as e:
        message = '{prog}: error: {message}\n'.format(prog=e.parser.prog, message=e.message)
        e.parser.print_usage(file=sys.stderr)
        sys.stderr.write(message)
        exit(1)
    except IllegalStateException as e:
        sys.stderr.write('ERROR Illegal State: {message}\n'.format(message=e.message))
        exit(1)
    except SSHException as e:
        sys.stderr.write('ERROR SSH connection problem: {message}\n'.format(message=e.message))
        exit(1)


if __name__ == '__main__':
    __check_java()
    main()
