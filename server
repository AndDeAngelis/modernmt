#!/bin/bash

# Args validation

function printerr {
	>&2 echo "ERROR: invalid command"
	>&2 echo
	>&2 echo "Usage:"
	>&2 echo "    $0 start [engine] [context-analyzer-port moses-decoder-port rest-api-port]"
	>&2 echo "    $0 stop [engine]"
	>&2 echo "    $0 status [engine]"
}

arg_engine="default"
ca_port=
ms_port=
rs_port=

case "$1" in
	status)
		if [ "$#" -gt "2" ]; then
			printerr
			exit 3
		elif [ "$#" -eq "2" ]; then
			arg_engine="$2"
		fi
	;;
	stop)
		if [ "$#" -gt "2" ]; then
			printerr
			exit 3
		elif [ "$#" -eq "2" ]; then
			arg_engine="$2"
		fi
	;;
	start)
		if [ "$#" -eq "5" ]; then
			arg_engine="$2"
			ca_port="$3"
			ms_port="$4"
			rs_port="$5"
		elif [ "$#" -eq "4" ]; then
			ca_port="$2"
			ms_port="$3"
			rs_port="$4"
		elif [ "$#" -eq "2" ]; then
			arg_engine="$2"
		elif [ "$#" -ne "1" ]; then
			printerr
			exit 3
		fi
	;;
	*)
		printerr
		exit 3
	;;
esac

echo
echo "[Engine: $arg_engine]"
echo

# Import environment

__home=$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )
source $__home/scripts/env.sh $arg_engine

user="$(whoami)"
if [ -z "$ca_port" ]; then
	ports=($($scripts_dir/getfreeports.py))
	
	ca_port=${ports[0]}
	ms_port=${ports[1]}
	rs_port=${ports[2]}
fi

# Context Analyzer section
ca_process_name="context-analyzer"
ca_stdout_log="$engine_log_dir/$ca_process_name.out"
ca_stderr_log="$engine_log_dir/$ca_process_name.err"
ca_classpath="$context_analyzer_home/context-analyzer.jar"
ca_main_class="net.translated.contextanalyzer.http.Server"
ca_pid_file="$engine_runtime_dir/$ca_process_name.pid"

if [ ! -e "$ca_pid_file" ] ; then
	touch "$ca_pid_file"
fi

java_home=$(dirname $(dirname $(readlink -e /usr/bin/javac)))
jsvc=$(which jsvc)

jsvc_exec() {
	cmd="$1"
	args="${*:2}"

	if [ "$cmd" != "-stop" ]; then
		cmd=
	fi

	pushd $context_analyzer_home &> /dev/null
	$jsvc -home $java_home -cp $ca_classpath -user $user -outfile $ca_stdout_log -errfile $ca_stderr_log -pidfile $ca_pid_file $cmd $ca_main_class $args
	popd &> /dev/null
}

# Moses decoder section
ms_process_name="moses-decoder"
ms_moses_ini_src=$engine_moses_dir/cfg/moses.ini
ms_moses_ini=$engine_moses_dir/cfg/~moses.ini
ms_log="$engine_log_dir/$ms_process_name.log"
ms_pid_file="$engine_runtime_dir/$ms_process_name.pid"

if [ ! -e "$ms_pid_file" ] ; then
	touch "$ms_pid_file"
fi

moses_exec() {
	case "$1" in
		start)
			rm -f $ms_log
			sed "s/$CONTEXT_ANALYZER_PLACEHOLDER/localhost:$ca_port/g" $ms_moses_ini_src > $ms_moses_ini
			$moses_home/bin/moses -f $ms_moses_ini --server --server-port $ms_port >> $ms_log 2>&1 &
			echo "$!" > $ms_pid_file
		;;
		stop)
			ms_pid=$(head -n 1 $ms_pid_file 2>/dev/null)
			if [ ! -z "$ms_pid" ]; then
				kill -9 $ms_pid &> /dev/null
				rm -rf $ms_pid_file
			fi
		;;
	esac
}

# REST interface section
rs_process_name="rest-service"
rs_log="$engine_log_dir/$rs_process_name.log"
rs_pid_file="$engine_runtime_dir/$rs_process_name.pid"

rest_exec() {
	case "$1" in
		start)
			$scripts_dir/rest-client.py $rs_port $ms_port >> $rs_log 2>&1 &
			echo "$!" > $rs_pid_file
		;;
		stop)
			rs_pid=$(head -n 1 $rs_pid_file 2>/dev/null)
			if [ ! -z "$rs_pid" ]; then
				kill -9 $rs_pid &> /dev/null
				rm -rf $rs_pid_file
			fi
		;;
	esac
}

# Executing command

case "$1" in
	status)
		ca_pid=$(head -n 1 $ca_pid_file 2>/dev/null)
		ms_pid=$(head -n 1 $ms_pid_file 2>/dev/null)
		rs_pid=$(head -n 1 $rs_pid_file 2>/dev/null)

		if ps -p $ca_pid &> /dev/null; then
			echo "running"
			exit 0
		fi
		if ps -p $ms_pid &> /dev/null; then
			echo "running"
			exit 0
		fi
		if ps -p $rs_pid &> /dev/null; then
			echo "running"
			exit 0
		fi

		echo "stopped"
	;;
	start)
		echo -n "Starting Context Analyzer on port $ca_port...   "
		jsvc_exec -stop &> /dev/null
		jsvc_exec -start -p $ca_port -i "$engine_context_analyzer_index_dir"
		echo "DONE"

		echo -n "Starting Moses Decoder on port $ms_port...   "
		moses_exec stop &> /dev/null
		moses_exec start
		echo "DONE"

		echo -n "Starting REST Interface on port $rs_port...   "
		rest_exec stop &> /dev/null
		rest_exec start
		echo "DONE"
	;;
	stop)
		echo -n "Stopping Context Analyzer...   "
		jsvc_exec -stop
		echo "DONE"

		echo -n "Stopping Moses Decoder...   "
		moses_exec stop
		echo "DONE"

		echo -n "Stopping REST Interface...   "
		rest_exec stop
		echo "DONE"
	;;
esac

























